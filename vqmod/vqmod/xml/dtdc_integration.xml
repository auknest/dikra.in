<modification>
    <id>Dikra DTDC INTEGRATION </id>
    <version>1.0.0</version>
    <vqmver>1.0.0</vqmver>
    <author>V2 Bhendekar</author>
    
    <!--BOF Admin:  -->
    <file name="admin/model/extension/extension.php">
        <operation>
            <search position="before"><![CDATA[public function getInstalled($type) {]]></search>
            <add><![CDATA[
function getExtensions($type) {
        $query = $this->db->query("SELECT * FROM " . DB_PREFIX . "extension WHERE `type` = '" . $this->db->escape($type) . "'");

        return $query->rows;
    }
            ]]></add>
        </operation>
    </file>
    <file name="admin/model/sale/order.php">
        <operation>
            <search position="after"><![CDATA[class ModelSaleOrder extends Model {]]></search>
            <add><![CDATA[
//staging 
      //private $dotzot_customer_code = 'CC000100132';
      //private $dotzot_ClientId = 'DOTZOT';
     // private $dotzot_user_name = 'dztuser';
     // private $dotzot_password = 'dotzot@2013';
     // private $dotzot_domain = "http://instacom-staging.azurewebsites.net/";
//Live
    private $dotzot_customer_code = 'SP000103213';
    private $dotzot_ClientId = 'INSTACOM';
    private $dotzot_user_name = 'instauser';
   private $dotzot_password = 'insta2013';
   private $dotzot_domain = "https://instacom.azurewebsites.net/";

            ]]></add>
        </operation>
        <operation>
            <search position="after"><![CDATA['order_id' => $order_query->row['order_id'],]]></search>
            <add><![CDATA[
'docket_no' => $order_query->row['docket_no'],
            ]]></add>
        </operation>
        <operation>
            <search position="replace"><![CDATA[$sql = "SELECT o.order_id, CONCAT(o.firstname, ' ', o.lastname) AS customer, (SELECT os.name FROM " . DB_PREFIX . "order_status os WHERE os.order_status_id = o.order_status_id AND os.language_id = '" . (int) $this->config->get('config_language_id') . "') AS order_status, o.shipping_code, o.total, o.currency_code, o.currency_value, o.date_added, o.date_modified FROM `" . DB_PREFIX . "order` o";]]></search>
            <add><![CDATA[
$sql = "SELECT o.order_id,docket_no,o.order_status_id, CONCAT(o.firstname, ' ', o.lastname) AS customer, (SELECT os.name FROM " . DB_PREFIX . "order_status os WHERE os.order_status_id = o.order_status_id AND os.language_id = '" . (int) $this->config->get('config_language_id') . "') AS order_status, o.shipping_code, o.total, o.currency_code, o.currency_value, o.date_added, o.date_modified FROM `" . DB_PREFIX . "order` o";
            ]]></add>
        </operation>
        <operation>
            <search position="before"><![CDATA[public function getTotalEmailsByProductsOrdered($products) {]]></search>
            <add><![CDATA[
public function pushOrder($order_id) {
        $order_info = $this->getOrder($order_id);
        $order_products = $this->getOrderProducts($order_id);
        $order_products = $order_products[0];

        $vendorName = $this->config->get('config_name');
        $vendoraddr1 = $this->config->get('config_address');
        $vendoraddr2 = '';
        $vendorMob = $this->config->get('config_telephone');
        $vendorzip = $this->config->get('config_postcode');


        if (isset($order_info)) {
            if ($order_info['payment_code'] == 'cod') {
                $mode = 'C';
                $cash = round($order_info['total']);
            } else {
                $mode = 'P';
                $cash = 0;
            }
            $total_amount = round($order_info['total']);

            $customer_name = $order_info['firstname'] . '' . $order_info['lastname'];
            $shipping_address_1 = $order_info['shipping_address_1'];
            $shipping_address_2 = $order_info['shipping_address_2'];
            $shipping_postcode = $order_info['shipping_postcode'];
            $shipping_city = $order_info['shipping_city'];
            $shipping_state = $order_info['shipping_zone'];
            $shipping_telephone = $order_info['telephone'];
            $ShippingEmailId = $order_info['email'];
            $product_code = $order_products['product_id'];
            $product_name = $order_products['name'];
            $product_quantity = $order_products['quantity'];
            $post_json = ['Customer' =>
                [
                    'CUSTCD' => $this->dotzot_customer_code,
                ],
                'DocketList' =>
                [0 => [
                        'AgentID' => '',
                        'AwbNo' => '',
                        'Breath' => '1',
                        'CPD' => date('d/m/Y', strtotime(' + 3 days')),
                        'CollectableAmount' => $cash,
                        'Consg_Number' => '',
                        'Consolidate_EW' => '',
                        'CustomerName' => $customer_name,
                        'Ewb_Number' => '',
                        'GST_REG_STATUS' => 'N',
                        'HSN_code' => '',
                        'Height' => '1',
                        'Invoice_Ref' => $order_id,
                        'IsPudo' => 'N',
                        'ItemName' => $product_name,
                        'Length' => '1',
                        'Mode' => $mode,
                        'NoOfPieces' => $product_quantity,
                        'OrderConformation' => 'Y',
                        'OrderNo' => $order_id,
                        'ProductCode' => $product_code,
                        'PudoId' => '',
                        'REASON_TRANSPORT' => '',
                        'RateCalculation' => 'N',
                        'Seller_GSTIN' => '',
                        'ShippingAdd1' => $shipping_address_1,
                        'ShippingAdd2' => $shipping_address_2,
                        'ShippingCity' => $shipping_city,
                        'ShippingEmailId' => $ShippingEmailId,
                        'ShippingMobileNo' => $shipping_telephone,
                        'ShippingState' => $shipping_state,
                        'ShippingTelephoneNo' => $shipping_telephone,
                        'ShippingZip' => $shipping_postcode,
                        'Shipping_GSTIN' => '',
                        'TotalAmount' => round($total_amount),
                        'TransDistance' => '20',
                        'TransporterID' => '',
                        'TransporterName' => '',
                        'TypeOfDelivery' => 'Home Delivery',
                        'TypeOfService' => 'Express',
                        'UOM' => 'Per KG',
                        'VendorAddress1' => $vendoraddr1,
                        'VendorAddress2' => $vendoraddr2,
                        'VendorName' => $vendorName,
                        'VendorPincode' => $vendorzip,
                        'VendorTeleNo' => $vendorMob,
                        'Weight' => '0.150',
                    ],
                ],
            ];
            $curl = curl_init();
            curl_setopt_array($curl, array(
                CURLOPT_URL => $this->dotzot_domain . "restservice/pushorderdataservice.svc/pushorderdata_pudo_gst",
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => "",
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 200,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => "POST",
                CURLOPT_POSTFIELDS => json_encode($post_json),
                CURLOPT_HTTPHEADER => array(
                    "cache-control: no-cache",
                    "content-type: application/json",
                ),
            ));
            $response = curl_exec($curl);
            $err = curl_error($curl);
            if ($err) {
                echo "cURL Error #:" . $err;
            } else {
                $result = json_decode($response);
                $res = $result[0];
                return $res;
            }
        }
    }

    public function addDocketNo($order_id, $dock_no) {
        $this->db->query("UPDATE `" . DB_PREFIX . "order` SET docket_no='" . $this->db->escape($dock_no) . "', date_modified = NOW() WHERE order_id = '" . (int) $order_id . "'");
    }

        public function returnOrder($order_id, $check = N) {

        $order_info = $this->getOrder($order_id);
        $order_products = $this->getOrderProducts($order_id);
        $order_products = $order_products[0];

        $vendorCompany = $this->config->get('config_name');
        $vendoraddr1 = $this->config->get('config_address');
        $vendoraddr2 = '';
        $vendorMob = $this->config->get('config_telephone');
        $vendorzip = $this->config->get('config_postcode');

        if (isset($order_info)) {
            if ($order_info['payment_code'] == 'cod') {
                $mode = 'C';
                $cash = $order_info['total'];
            } else {
                $mode = 'P';
                $cash = $order_info['total'];
            }
            $total_amount = $order_info['total'];
            $customer_name = $order_info['firstname'] . '' . $order_info['lastname'];
            $shipping_address_1 = $order_info['shipping_address_1'];
            $shipping_address_2 = $order_info['shipping_address_2'];
            $shipping_postcode = $order_info['shipping_postcode'];
            $shipping_city = $order_info['shipping_city'];
            $shipping_state = $order_info['shipping_zone'];
            $shipping_telephone = $order_info['telephone'];
            $xml = '<?xml version="1.0" encoding="UTF-8"?>';
            $xml .= '<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="https://instacom.dotzot.in/">';
            $xml .= '<SOAP-ENV:Body>';
            $xml .= '<ns1:PushReverseOrderData_PUDO>';
            $xml .= '<ns1:ClientId>' . $this->dotzot_ClientId . '</ns1:ClientId>';
            $xml .= '<ns1:UserName>' . $this->dotzot_user_name . '</ns1:UserName>';
            $xml .= '<ns1:Password>' . $this->dotzot_password . '</ns1:Password>';
            $xml .= '<ns1:RequestId>' . $order_id . '</ns1:RequestId>';
            $xml .= '<ns1:ConsignorName>' . $vendorCompany . '</ns1:ConsignorName>';
            $xml .= '<ns1:ConsignorAddress1>' . $vendoraddr1  . '</ns1:ConsignorAddress1>';
            $xml .= '<ns1:ConsignorAddress2>' . $vendoraddr2 . ' ' . $shipping_city . ',' . $shipping_state . '</ns1:ConsignorAddress2>';
            $xml .= '<ns1:MobileNo>' . $vendorMob . '</ns1:MobileNo>';
            $xml .= '<ns1:Pincode>' . $vendorzip . '</ns1:Pincode>';
            $xml .= '<ns1:SkuDescription> t</ns1:SkuDescription>';
            $xml .= '<ns1:DeclaredValue>' . round($cash, 0, PHP_ROUND_HALF_UP) . '</ns1:DeclaredValue>';
            $xml .= '<ns1:AgentId>Dikra</ns1:AgentId>';
            $xml .= '<ns1:CustomerCode>' . $this->dotzot_customer_code . '</ns1:CustomerCode>';
            $xml .= '<ns1:VendorName>' . $customer_name . '</ns1:VendorName>';
            $xml .= '<ns1:VendorAddress1>' . $shipping_address_1 . '</ns1:VendorAddress1>';
            $xml .= '<ns1:VendorAddress2>' . $shipping_address_2 . '</ns1:VendorAddress2>';
            $xml .= '<ns1:VendorPincode>' . $shipping_postcode . '</ns1:VendorPincode>';
            $xml .= '<ns1:VendorTeleNo>' . $shipping_telephone . '</ns1:VendorTeleNo>';
            $xml .= '<ns1:TransportMode>Express</ns1:TransportMode>';
            $xml .= '<ns1:ItemChecked>'.$check.'</ns1:ItemChecked>';
            $xml .= '<ns1:DockNo></ns1:DockNo>';
            $xml .= '</ns1:PushReverseOrderData_PUDO>';
            $xml .= '</SOAP-ENV:Body>';
            $xml .= '</SOAP-ENV:Envelope>';
            $res = simplexml_load_string($this->call($xml));
            return $res->ORDER;
        }
    }

    public function call($xml) {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $this->dotzot_domain . "services/InstacomCustomerServices.asmx?wsdl");
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            "Content-type: text/xml;charset=\"utf-8\"",
            "Accept: text/xml",
            "Cache-Control: no-cache",
            "Pragma: no-cache",
            "Content-length: " . strlen($xml),
        ));
        curl_setopt($ch, CURLOPT_HTTPAUTH, 'CURLAUTH_BASIC');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $xml);
        curl_setopt($ch, CURLOPT_VERBOSE, true);
        $response = curl_exec($ch);
        $res = $response;
        $data = new SimpleXMLElement($res);
        $sxml = $this->xmlToArray($data);
        if ($response) {
            $ressult_t = $sxml['Envelope']['soap:Body']['PushReverseOrderData_PUDOResponse']['PushReverseOrderData_PUDOResult'];
            curl_close($ch);
            return $ressult_t;
        } else {
            return FALSE;
        }
    }

    public function xmlToArray($xml, $options = array()) {
        $defaults = array(
            'namespaceSeparator' => ':', //you may want this to be something other than a colon
            'attributePrefix' => '@', //to distinguish between attributes and nodes with the same name
            'alwaysArray' => array(), //array of xml tag names which should always become arrays
            'autoArray' => true, //only create arrays for tags which appear more than once
            'textContent' => '$', //key used for the text content of elements
            'autoText' => true, //skip textContent key if node has no attributes or child nodes
            'keySearch' => false, //optional search and replace on tag and attribute names
            'keyReplace' => false       //replace values for above search values (as passed to str_replace())
        );
        $options = array_merge($defaults, $options);
        $namespaces = $xml->getDocNamespaces();
        $namespaces[''] = null; //add base (empty) namespace
        //get attributes from all namespaces
        $attributesArray = array();
        foreach ($namespaces as $prefix => $namespace) {
            foreach ($xml->attributes($namespace) as $attributeName => $attribute) {
                //replace characters in attribute name
                if ($options['keySearch'])
                    $attributeName = str_replace($options['keySearch'], $options['keyReplace'], $attributeName);
                $attributeKey = $options['attributePrefix']
                        . ($prefix ? $prefix . $options['namespaceSeparator'] : '')
                        . $attributeName;
                $attributesArray[$attributeKey] = (string) $attribute;
            }
        }

        //get child nodes from all namespaces
        $tagsArray = array();
        foreach ($namespaces as $prefix => $namespace) {
            foreach ($xml->children($namespace) as $childXml) {
                //recurse into child nodes
                $childArray = $this->xmlToArray($childXml, $options);
                list($childTagName, $childProperties) = each($childArray);

                //replace characters in tag name
                if ($options['keySearch'])
                    $childTagName = str_replace($options['keySearch'], $options['keyReplace'], $childTagName);
                //add namespace prefix, if any
                if ($prefix)
                    $childTagName = $prefix . $options['namespaceSeparator'] . $childTagName;

                if (!isset($tagsArray[$childTagName])) {
                    //only entry with this key
                    //test if tags of this type should always be arrays, no matter the element count
                    $tagsArray[$childTagName] = in_array($childTagName, $options['alwaysArray']) || !$options['autoArray'] ? array($childProperties) : $childProperties;
                } elseif (
                        is_array($tagsArray[$childTagName]) && array_keys($tagsArray[$childTagName]) === range(0, count($tagsArray[$childTagName]) - 1)
                ) {
                    //key already exists and is integer indexed array
                    $tagsArray[$childTagName][] = $childProperties;
                } else {
                    //key exists so convert to integer indexed array with previous value in position 0
                    $tagsArray[$childTagName] = array($tagsArray[$childTagName], $childProperties);
                }
            }
        }

        //get text content of node
        $textContentArray = array();
        $plainText = trim((string) $xml);
        if ($plainText !== '')
            $textContentArray[$options['textContent']] = $plainText;

        //stick it all together
        $propertiesArray = !$options['autoText'] || $attributesArray || $tagsArray || ($plainText === '') ? array_merge($attributesArray, $tagsArray, $textContentArray) : $plainText;

        //return node as array
        return array(
            $xml->getName() => $propertiesArray
        );
    }

    public function cancelOrder($DockNo) {
        $curl = curl_init();
        curl_setopt_array($curl, array(
            CURLOPT_URL => $this->dotzot_domain . "RestService/PreventOrderDataService.svc/PreventOrderData",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => "<PreventDocketMain xmlns=\"http://schemas.datacontract.org/2004/07/WebX.Entity\">\n<ClientId>".$this->dotzot_ClientId."</ClientId>\n<PassWord>".$this->dotzot_password."</PassWord>\n<PreventDocketList>\n<PreventDocket>\n<AddRemove>Add</AddRemove>\n<DockNo>" . trim($DockNo) . "</DockNo>\n</PreventDocket>\n</PreventDocketList>\n<Type>P</Type>\n<UserId>".$this->dotzot_user_name."</UserId>\n</PreventDocketMain>",
            CURLOPT_HTTPHEADER => array(
                "cache-control: no-cache",
                "content-type: application/xml",
            ),
        ));
        $response = curl_exec($curl);
        $err = curl_error($curl);
        curl_close($curl);
        $res = (string) $response;


        $sxml = simplexml_load_string($res);
        //echo $res;die;
//        $result = json_encode($sxml);

        return $sxml;
    }

    public function trackOrder($DockNo) {
        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => $this->dotzot_domain . "RestService/DocketTrackingService.svc/GetDocketTrackingDetails",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => "{\"DocketNo\":\"$DockNo\"}",
            CURLOPT_HTTPHEADER => array(
                "cache-control: no-cache",
                "content-type: application/json",
            ),
        ));

        $response = curl_exec($curl);
        $err = curl_error($curl);

        curl_close($curl);
        $res = json_decode($response);
        return $res[0];
    }

            ]]></add>
        </operation>
    </file>
    <file name="admin/controller/sale/order.php">
        <operation>
            <search position="after"><![CDATA['customer' => $result['customer'],]]></search>
            <add><![CDATA[
                'docket_no' => $result['docket_no'],
                'order_status_id' => $result['order_status_id'],
                'track' => $this->url->link('sale/order/track_shipping', 'token=' . $this->session->data['token'] . '&order_id=' . $result['order_id'] . $url, true),
            ]]></add>
        </operation>
        <operation>
            <search position="before"><![CDATA[public function shipping() {]]></search>
            <add><![CDATA[
public function push_shipping() {
        $this->load->model('sale/order');
        $this->load->model('checkout/order');
        $json['status'] = FALSE;
        if (isset($this->request->post['order_id'])) {
            $order_id = $this->request->post['order_id'];
        } else {
            $order_id = 0;
        }
        $order_info = $this->model_sale_order->getOrder($order_id);
        if ($order_info) {
            if ($order_info['docket_no'] == '') {
                $push = $this->model_sale_order->pushOrder($order_id);
                if ($push) {
                    if ($push->Succeed == 'Yes') {
                        $this->model_sale_order->addDocketNo($order_id, $push->DockNo);
                        $this->model_checkout_order->addOrderHistory($order_id, 2);
                        $json['status'] = TRUE;
                        $json['message'] = $push->Reason;
                    } else {
                        $json['message'] = $push->Reason;
                    }
                }
            } else {
                $json['message'] = 'order already pushed';
            }
        }
        $this->response->addHeader('Content-Type: application/json');
        $this->response->setOutput(json_encode($json));
    }

    public function track_shipping() {
        if (isset($this->request->get['order_id'])) {
            $order_id = $this->request->get['order_id'];
        } else {
            $order_id = 0;
        }
        $this->load->model('sale/order');
        $order_info = $this->model_sale_order->getOrder($order_id);
        if ($order_info) {
            $this->load->language('sale/order');
            $data['text_no_results'] = $this->language->get('text_no_results');
            $this->document->setTitle('Track DTDC Order');

            $data['heading_title'] = 'SHIPMENT TRACK';
            $data['text_order_detail'] = $this->language->get('text_order_detail');
            $data['text_customer_detail'] = $this->language->get('text_customer_detail');
            $data['text_customer'] = $this->language->get('text_customer');
            $data['text_customer_group'] = $this->language->get('text_customer_group');
            $data['text_telephone'] = $this->language->get('text_telephone');
            $data['text_shipping_address'] = $this->language->get('text_shipping_address');
            $data['button_edit'] = $this->language->get('button_edit');
            $data['tab_history'] = $this->language->get('tab_history');
            $data['text_history'] = $this->language->get('text_history');
            $data['column_date_added'] = $this->language->get('column_date_added');
            $data['column_status'] = $this->language->get('column_status');
            $data['column_notify'] = $this->language->get('column_notify');
            $data['column_comment'] = $this->language->get('column_comment');
            $data['breadcrumbs'] = array();

            $data['breadcrumbs'][] = array(
                'text' => $this->language->get('text_home'),
                'href' => $this->url->link('common/dashboard', 'token=' . $this->session->data['token'], true)
            );

            $data['breadcrumbs'][] = array(
                'text' => $this->language->get('heading_title'),
                'href' => $this->url->link('sale/order', 'token=' . $this->session->data['token'], true)
            );
            $data['token'] = $this->session->data['token'];

            $data['order_id'] = $this->request->get['order_id'];

            // Shipping Address
            if ($order_info['shipping_address_format']) {
                $format = $order_info['shipping_address_format'];
            } else {
                $format = '{firstname} {lastname}' . "\n" . '{company}' . "\n" . '{address_1}' . "\n" . '{address_2}' . "\n" . '{city} {postcode}' . "\n" . '{zone}' . "\n" . '{country}';
            }

            $find = array(
                '{firstname}',
                '{lastname}',
                '{company}',
                '{address_1}',
                '{address_2}',
                '{city}',
                '{postcode}',
                '{zone}',
                '{zone_code}',
                '{country}'
            );

            $replace = array(
                'firstname' => $order_info['shipping_firstname'],
                'lastname' => $order_info['shipping_lastname'],
                'company' => $order_info['shipping_company'],
                'address_1' => $order_info['shipping_address_1'],
                'address_2' => $order_info['shipping_address_2'],
                'city' => $order_info['shipping_city'],
                'postcode' => $order_info['shipping_postcode'],
                'zone' => $order_info['shipping_zone'],
                'zone_code' => $order_info['shipping_zone_code'],
                'country' => $order_info['shipping_country']
            );

            $data['shipping_address'] = str_replace(array("\r\n", "\r", "\n"), '<br />', preg_replace(array("/\s\s+/", "/\r\r+/", "/\n\n+/"), '<br />', trim(str_replace($find, $replace, $format))));

            $data['catalog'] = $this->request->server['HTTPS'] ? HTTPS_CATALOG : HTTP_CATALOG;

            $track = $this->model_sale_order->trackOrder($order_info['docket_no']);
            if ($track) {
                $data['status'] = TRUE;
                $data['response'] = $track;
            }
            $data['header'] = $this->load->controller('common/header');
            $data['column_left'] = $this->load->controller('common/column_left');
            $data['footer'] = $this->load->controller('common/footer');

            $this->response->setOutput($this->load->view('sale/order_tracking', $data));
        } else {
            return new Action('error/not_found');
        }

//        $this->response->setOutput($this->load->view('sale/order_tracking', $data));
//        $this->response->addHeader('Content-Type: application/json');
//        $this->response->setOutput(json_encode($json));
    }

    public function cancel_shipping() {
        $this->load->model('sale/order');
        $this->load->model('checkout/order');
        $json['status'] = FALSE;
        if (isset($this->request->post['order_id'])) {
            $order_id = $this->request->post['order_id'];
        } else {
            $order_id = 0;
        }
        $order_info = $this->model_sale_order->getOrder($order_id);
        if ($order_info) {
            $track = $this->model_sale_order->cancelOrder($order_info['docket_no']);
            if ($track && $track->Success == 'true') {
                $this->model_checkout_order->addOrderHistory($order_id, 7, 'Order Cancelled by Customer');
                $json['status'] = TRUE;
                $msg = (string) $track->PreventResponseOutputList->PreventResponseOutput->Status;
                $json['response'] = $msg;
            } else {
                $json['status'] = TRUE;
                $json['response'] = $track->ErrorMessage;
            }
        }
        // $this->response->redirect($this->url->link('sale/order/track_shipping', 'token=' . $this->session->data['token'] . '&order_id=' . $result['order_id']));
        $this->response->addHeader('Content-Type: application/json');
        $this->response->setOutput(json_encode($json));
    }

            ]]></add>
        </operation>
    </file>
    <file name="admin/view/template/sale/order_list.tpl">
        <operation>
            <search position="replace"><![CDATA[<td class="text-right"><a href="<?php echo $order['view']; ?>" data-toggle="tooltip" title="<?php echo $button_view; ?>" class="btn btn-info"><i class="fa fa-eye"></i></a> <a href="<?php echo $order['edit']; ?>" data-toggle="tooltip" title="<?php echo $button_edit; ?>" class="btn btn-primary"><i class="fa fa-pencil"></i></a></td>]]></search>
            <add><![CDATA[
                    <td class="text-right">
                      <a href="<?php echo $order['view']; ?>" data-toggle="tooltip" title="<?php echo $button_view; ?>" class="btn btn-info"><i class="fa fa-eye"></i></a>
                      <a href="<?php echo $order['edit']; ?>" data-toggle="tooltip" title="<?php echo $button_edit; ?>" class="btn btn-primary"><i class="fa fa-pencil"></i></a>
                      <?php if(empty($order['docket_no'])){
                      ?>
                      <a onclick="pushOrder( <?php  echo $order['order_id'] ?> , $(this))" data-toggle="tooltip" title="Push Order To DTDC" class="btn btn-danger">Push to DTDC</a>
                      <?php }else{ 
                      if($order['order_status_id']!=7){ ?>                                       
                      <a onclick="CancelOrder( <?php  echo $order['order_id'] ?> , $(this))" data-toggle="tooltip" title="Cancel DTDC Order" class="btn btn-danger"><i class="fa fa-close"></i></a>
                      <?php } ?>                                       
                      <a target="_blank" href="<?php echo $order['track']; ?>"data-toggle="tooltip" title="Track DTDC Order" class="btn btn-success"><i class="fa fa-truck"></i></a>
                      <?php } ?> 
                    </td>
]]></add>
        </operation>
        <operation>
            <search position="before"><![CDATA[<?php echo $footer; ?>]]></search>
            <add><![CDATA[
                 <script type="text/javascript"><!--
         function pushOrder(order_id, element) {
        $(element).text('loading');
        $.ajax({
        url: 'index.php?route=sale/order/push_shipping&token=<?php echo $token; ?>',
                type: 'POST',
                dataType: 'json',
                data: {order_id: order_id},
                success: function (json) {
                if (json.status == true) {
                location.reload();
                element.hide();
                } else {

                alert(json.message);
                $(element).text('Push to DTDC');
                }
                }
        });
        }
        function CancelOrder(order_id, element) {
         $(element).text('loading');
        $.ajax({
        url: 'index.php?route=sale/order/cancel_shipping&token=<?php echo $token; ?>',
                type: 'POST',
                dataType: 'json',
                data: {order_id: order_id},
                success: function (json) {
                if (json.status == true) {
                location.reload();
                } else {
                alert(json.message);
                $(element).text('<i class="fa fa-close"></i>');
                }
                }
        });
        }
        function TrackOrder(order_id, element) {
        $.ajax({
        url: 'index.php?route=sale/order/track_shipping&token=<?php echo $token; ?>',
                type: 'POST',
                dataType: 'json',
                data: {order_id: order_id},
                success: function (json) {
                console.log(json);
                if (json.status == true) {
                location.reload();
                } else {
                alert(json.message);
                }
                }
        });
        }
        //--></script>
            ]]></add>
        </operation>
    </file>
    <file name="admin/view/template/sale/return_list.tpl">
        <operation>
            <search position="replace"><![CDATA[<td class="text-right"><a href="<?php echo $return['edit']; ?>" data-toggle="tooltip" title="<?php echo $button_edit; ?>" class="btn btn-primary"><i class="fa fa-pencil"></i></a></td>]]></search>
            <add><![CDATA[
                    <td class="text-right">
                                        <a href="<?php echo $return['edit']; ?>" data-toggle="tooltip" title="<?php echo $button_edit; ?>" class="btn btn-primary"><i class="fa fa-pencil"></i></a>
                                        <?php 
                                        $return_id=$return['return_id'];
                                        ?>
                                        <?php if(empty($return['docket_no']) && $return['return_status_id']==1){
                                        ?>
                                        <a onclick="returnOrder('<?php echo $return_id  ?>', $(this))" data-toggle="tooltip" title="Order Retrun Request  To DTDC" class="btn btn-danger">DTDC Return</a>
                                        <?php } 
                                        if($return['docket_no']){ 
                                        ?>                                    
                                        <a target="_blank" href="<?php echo $return['track']; ?>"data-toggle="tooltip" title="Track DTDC Return " class="btn btn-success"><i class="fa fa-truck"></i></a>
                                        <?php }  ?> 
                                    </td>
]]></add>
        </operation>
        <operation>
            <search position="before"><![CDATA[ $('input[name=\'filter_customer\']').autocomplete({]]></search>
            <add><![CDATA[
                 function returnOrder(return_id, element) {
            $(element).text('loading');
            $.ajax({
                url: 'index.php?route=sale/return/return_shipping&token=<?php echo $token; ?>',
                type: 'POST',
                dataType: 'json',
                data: {return_id:return_id},
                success: function (json) {
                    if (json.status == true) {
                        location.reload();
                        element.hide();
                    } else {
                        alert(json.message);
                          $(element).text('DTDC Return');
                        
                    }
                }
            });
        }
        function CancelOrder(return_id, element) {
            $.ajax({
                url: 'index.php?route=sale/return/cancel_shipping&token=<?php echo $token; ?>',
                type: 'POST',
                dataType: 'json',
                data: {return_id:return_id},
                success: function (json) {
                    if (json.status == true) {
                        location.reload();
                    } else {
                        alert(json.message);
                    }
                }
            });
        }
        function TrackOrder(return_id, element) {
            $.ajax({
                url: 'index.php?route=sale/return/track_shipping&token=<?php echo $token; ?>',
                type: 'POST',
                dataType: 'json',
                data: {return_id:return_id},
                success: function (json) {
                    console.log(json);
                    if (json.status == true) {
                        location.reload();
                    } else {
                        alert(json.message);
                    }
                }
            });
        }
            ]]></add>
        </operation>
    </file>
    <file name="admin/controller/sale/return.php">
        <operation>
            <search position="after"><![CDATA[$data['returns'][] = array(]]></search>
            <add><![CDATA[           
                'docket_no' => $result['docket_no'],
                'return_status_id' => $result['return_status_id'],
                 'edit' => $this->url->link('sale/return/edit', 'token=' . $this->session->data['token'] . '&return_id=' . $result['return_id'] . $url, true),
                'track' => $this->url->link('sale/return/track_shipping', 'token=' . $this->session->data['token'] . '&return_id=' . $result['return_id'] . $url, true),
            ]]></add>
        </operation>
        <operation>
            <search position="before"><![CDATA[public function history() {]]></search>
            <add><![CDATA[           
 public function return_shipping() {
        $this->load->model('sale/order');
        $this->load->model('sale/return');
        $json['status'] = FALSE;
        if (isset($this->request->post['return_id'])) {
            $return_id = $this->request->post['return_id'];
        } else {
            $return_id = 0;
        }
        $retrun_info = $this->model_sale_return->getReturn($return_id);
        if ($retrun_info) {
            $order_id = $retrun_info['order_id'];
            if ($retrun_info['docket_no'] == '') {
                      if ($return_info['opened']== 1) {
            $check = 'Y';
        } else {
            $check = 'N';
        }
                $retrun = $this->model_sale_order->returnOrder($order_id,$check);
                if ($retrun) {
                    if ($retrun->Succeed == 'Yes') {
                        $this->model_sale_return->addDocketNo($return_id, $retrun->DOCKNO);
                        $this->model_sale_return->addReturnHistory($return_id, ['return_status_id' => 4, 'notify' => 1, 'comment' => 'Return Request Confimed']);
                        $json['status'] = TRUE;
                        $json['message'] = $retrun->Reason;
                    } else {
                        $json['message'] = $retrun->Reason;
                    }
                }
            } else {
                $json['message'] = 'order already Resquested For Return';
            }
        }
        $this->response->addHeader('Content-Type: application/xml');
        $this->response->setOutput(json_encode($json));
    }

    public function track_shipping() {
        $this->load->model('sale/order');
        $this->load->model('sale/return');
        $json['status'] = FALSE;
        if (isset($this->request->get['return_id'])) {
            $return_id = $this->request->get['return_id'];
        } else {
            $return_id = 0;
        }
        $retrun_info = $this->model_sale_return->getReturn($return_id);
        if ($retrun_info) {
            $order_id = $retrun_info['order_id'];
            $order_info = $this->model_sale_order->getOrder($order_id);
            if ($order_info) {
                $this->load->language('sale/order');

                $this->document->setTitle('Track DTDC Order');

                $data['heading_title'] = 'TRACK RETURN SHIPMENT ';
                $data['text_order_detail'] = $this->language->get('text_order_detail');
                $data['text_customer_detail'] = $this->language->get('text_customer_detail');
                $data['text_customer'] = $this->language->get('text_customer');
                $data['text_customer_group'] = $this->language->get('text_customer_group');
                $data['text_telephone'] = $this->language->get('text_telephone');
                $data['text_shipping_address'] = $this->language->get('text_shipping_address');
                $data['button_edit'] = $this->language->get('button_edit');
                $data['tab_history'] = $this->language->get('tab_history');
                $data['text_history'] = $this->language->get('text_history');
                $data['column_date_added'] = $this->language->get('column_date_added');
                $data['column_status'] = $this->language->get('column_status');
                $data['column_notify'] = $this->language->get('column_notify');
                $data['column_comment'] = $this->language->get('column_comment');
                $data['breadcrumbs'] = array();

                $data['breadcrumbs'][] = array(
                    'text' => $this->language->get('text_home'),
                    'href' => $this->url->link('common/dashboard', 'token=' . $this->session->data['token'], true)
                );
                $data['breadcrumbs'][] = array(
                    'text' => "Product Returns",
                    'href' => $this->url->link('sale/return', 'token=' . $this->session->data['token'], true)
                );
                $data['token'] = $this->session->data['token'];

                $data['order_id'] = $order_id;

                // Shipping Address
                if ($order_info['shipping_address_format']) {
                    $format = $order_info['shipping_address_format'];
                } else {
                    $format = '{firstname} {lastname}' . "\n" . '{company}' . "\n" . '{address_1}' . "\n" . '{address_2}' . "\n" . '{city} {postcode}' . "\n" . '{zone}' . "\n" . '{country}';
                }

                $find = array(
                    '{firstname}',
                    '{lastname}',
                    '{company}',
                    '{address_1}',
                    '{address_2}',
                    '{city}',
                    '{postcode}',
                    '{zone}',
                    '{zone_code}',
                    '{country}'
                );

                $replace = array(
                    'firstname' => $order_info['shipping_firstname'],
                    'lastname' => $order_info['shipping_lastname'],
                    'company' => $order_info['shipping_company'],
                    'address_1' => $order_info['shipping_address_1'],
                    'address_2' => $order_info['shipping_address_2'],
                    'city' => $order_info['shipping_city'],
                    'postcode' => $order_info['shipping_postcode'],
                    'zone' => $order_info['shipping_zone'],
                    'zone_code' => $order_info['shipping_zone_code'],
                    'country' => $order_info['shipping_country']
                );

                $data['shipping_address'] = str_replace(array("\r\n", "\r", "\n"), '<br />', preg_replace(array("/\s\s+/", "/\r\r+/", "/\n\n+/"), '<br />', trim(str_replace($find, $replace, $format))));
                $data['text_no_results'] = $this->language->get('text_no_results');
                $data['catalog'] = $this->request->server['HTTPS'] ? HTTPS_CATALOG : HTTP_CATALOG;
                $track = $this->model_sale_order->trackOrder($retrun_info['docket_no']);
                if ($track) {
                    $data['status'] = TRUE;
                    $data['response'] = $track;
                }
                $data['header'] = $this->load->controller('common/header');
                $data['column_left'] = $this->load->controller('common/column_left');
                $data['footer'] = $this->load->controller('common/footer');

                $this->response->setOutput($this->load->view('sale/order_tracking', $data));
            } else {
                return new Action('error/not_found');
            }
        }
//        $this->response->addHeader('Content-Type: application/json');
//        $this->response->setOutput(json_encode($json));
    }

    public function cancel_shipping() {
        $this->load->model('sale/order');
        $this->load->model('sale/return');
        $json['status'] = FALSE;
        if (isset($this->request->post['return_id'])) {
            $return_id = $this->request->post['return_id'];
        } else {
            $return_id = 0;
        }
        $retrun_info = $this->model_sale_return->getReturn($return_id);
        if ($retrun_info) {
            $order_id = $retrun_info['order_id'];
            $track = $this->model_sale_order->cancelOrder($retrun_info['docket_no']);
            if ($track && $track->Success == 'true') {
                $this->model_checkout_order->addOrderHistory($order_id, 7, 'Order Cancelled by Customer');
                $json['status'] = TRUE;
                $msg = (string) $track->PreventResponseOutputList->PreventResponseOutput->Status;
                $json['response'] = $msg;
            } else {
                $json['status'] = TRUE;
                $json['response'] = $track->ErrorMessage;
            }
        }
        // $this->response->redirect($this->url->link('sale/order/track_shipping', 'token=' . $this->session->data['token'] . '&order_id=' . $result['order_id']));
        $this->response->addHeader('Content-Type: application/json');
        $this->response->setOutput(json_encode($json));
    }            
]]></add>
        </operation>
    </file>
    <file name="admin/model/sale/return.php">
        <operation>
            <search position="before"><![CDATA[public function getTotalReturnHistoriesByReturnStatusId($return_status_id) {]]></search>
            <add><![CDATA[           
  public function addDocketNo($return_id, $dock_no) {
        $this->db->query("UPDATE `" . DB_PREFIX . "return` SET docket_no='" . $this->db->escape($dock_no) . "', date_modified = NOW() WHERE return_id = '" . (int) $return_id . "'");
    }
            ]]></add>
        </operation>
      
       
    </file>
    <!--EOF Admin -->
    <!--BOF Catalog -->
    <file name="catalog/controller/account/order.php">
        <operation>
            <search position="after"><![CDATA[$products = $this->model_account_order->getOrderProducts($this->request->get['order_id']);]]></search>
            <add><![CDATA[           
$this->load->model('account/return');
            ]]></add>
        </operation>
        <operation>
            <search position="before"><![CDATA[$data['products'][] = array(]]></search>
            <add><![CDATA[
 $return_info = $this->model_account_return->getReturnByProductId($order_id, $product['product_id']);
                $is_return = ($return_info) ? TRUE : FALSE;

            ]]></add>
        </operation>
        <operation>
            <search position="after"><![CDATA[$data['products'][] = array(]]></search>
            <add><![CDATA[
'is_returned' => $is_return,
            ]]></add>
        </operation>
        <operation>
            <search position="before"><![CDATA[$data['vouchers'] = array();]]></search>
            <add><![CDATA[
// BOF cancellation and return condition            
            $processing_status = $this->config->get('config_processing_status');
            $complete_status = $this->config->get('config_complete_status');
            $data['cancel_allow'] = FALSE;
            $data['return_allow'] = FALSE;
            if (in_array($order_info['order_status_id'], $processing_status)) {
                $data['cancel_allow'] = TRUE;
                $data['return_allow'] = FALSE;
            }
            if (in_array($order_info['order_status_id'], $complete_status)) {
                $data['cancel_allow'] = FALSE;
                $data['return_allow'] = TRUE;
            }
// BOF cancellation and return condition 
            ]]></add>
        </operation>
        <operation>
            <search position="before"><![CDATA[public function reorder() {]]></search>
            <add><![CDATA[
// BOF cancellation  of order            
         public function cancel_request() {
        $json['status'] = FALSE;
        if (isset($this->request->post['order_id'])) {
            $this->load->model('checkout/order');
            $order_id = $this->request->post['order_id'];
            $comment = $this->request->post['comment'];
            $this->model_checkout_order->addOrderHistory($order_id, 9, $comment, TRUE);
            $json['status'] = TRUE;
            $json['redirect'] = $this->url->link('account/order/info&order_id=' . $order_id);
        } else {
            $json['error'] = 'somthing went wrong ... please try again';
        }
        $this->response->addHeader('Content-Type: application/json');
        $this->response->setOutput(json_encode($json));
    }
// BOF cancellation  of order  
            ]]></add>
        </operation>
    </file>
    <file name="catalog/model/account/order.php">
        <operation>
            <search position="after"><![CDATA['order_id' => $order_query->row['order_id'],]]></search>
            <add><![CDATA[           
 'order_status_id' => $order_query->row['order_status_id'],
            ]]></add>
        </operation>
        <operation>
            <search position="replace"><![CDATA[$query = $this->db->query("SELECT o.order_id, o.firstname, o.lastname, os.name as status, o.date_added, o.total, o.currency_code, o.currency_value FROM `" . DB_PREFIX . "order` o LEFT JOIN " . DB_PREFIX . "order_status os ON (o.order_status_id = os.order_status_id) WHERE o.customer_id = '" . (int) $this->customer->getId() . "' AND o.order_status_id > '0' AND o.store_id = '" . (int) $this->config->get('config_store_id') . "' AND os.language_id = '" . (int) $this->config->get('config_language_id') . "' ORDER BY o.order_id DESC LIMIT " . (int) $start . "," . (int) $limit);]]></search>
            <add><![CDATA[
$query = $this->db->query("SELECT o.order_id, o.order_status_id,o.firstname, o.lastname, os.name as status, o.date_added, o.total, o.currency_code, o.currency_value FROM `" . DB_PREFIX . "order` o LEFT JOIN " . DB_PREFIX . "order_status os ON (o.order_status_id = os.order_status_id) WHERE o.customer_id = '" . (int) $this->customer->getId() . "' AND o.order_status_id > '0' AND o.store_id = '" . (int) $this->config->get('config_store_id') . "' AND os.language_id = '" . (int) $this->config->get('config_language_id') . "' ORDER BY o.order_id DESC LIMIT " . (int) $start . "," . (int) $limit);

            ]]></add>
        </operation>
       
    </file>
    <file name="catalog/view/theme/*/template/account/order_info.tpl">
        <operation>
            <search position="replace"><![CDATA[ <td style="width: 20px;"></td>]]></search>
            <add><![CDATA[           
 <td style="width: 20px;" class="text-center">
                    <?php if($cancel_allow){ ?>
                    <a  data-toggle="modal" data-target="#cancelOrder" title="" class="btn btn-danger"  data-original-title="Cancel Order"><i class="fa fa-times"></i></a>
                    <?php }?>
                </td>
            ]]></add>
        </operation>
        <operation>
            <search position="replace"><![CDATA[<a href="<?php echo $product['return']; ?>" data-toggle="tooltip" title="<?php echo $button_return; ?>" class="btn btn-danger"><i class="fa fa-reply"></i></a></td>]]></search>
            <add><![CDATA[
 <?php if($return_allow && !$product['is_returned']){ ?>
                    <a href="<?php echo $product['return']; ?>" data-toggle="tooltip" title="<?php echo $button_return; ?>" class="btn btn-danger"><i class="fa fa-reply"></i></a>
                    <?php } ?>

            ]]></add>
        </operation>
        <operation>
            <search position="before"><![CDATA[<div class="buttons clearfix">]]></search>
            <add><![CDATA[
<!-- Modal -->
<div class="modal fade" id="cancelOrder" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Order Cancellation Request</h4>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    
                        <textarea name="comment" rows="5" placeholder="Cancellation Reason " id="cancel-comment" class="form-control" ></textarea>
                   
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="cancelRequest" class="btn btn-default">Request</button>
            </div>
        </div>

    </div>
</div> 
            ]]></add>
        </operation>
        <operation>
            <search position="before"><![CDATA[<?php echo $content_bottom; ?></div>]]></search>
            <add><![CDATA[
<script type="text/javascript"><!--
   $("#cancelRequest").click(function () {
        $("#reason_error").remove();
        var comment = $("#cancel-comment").val();
        var order_id = '<?php echo $order_id; ?>';
        if (comment < 20) {
            $("#cancel-comment").after('<div id="reason_error" class="text-danger">Reason  must be greater than 20  characters!</div>')
        } else {
            $.ajax({
                type: 'POST',
                url: 'index.php?route=account/order/cancel_request',
                dataType: 'json',
                data: {order_id: order_id, comment: comment},
                success: function (json) {
                    if (json.error && json.status == false) {
                        $("#cancel-comment").after('<div id="reason_error" class="text-danger">' + json.error + '</div>')
                    }
                    if (json.status == true) {
                        window.location.href = json.redirect;
                    }
                }
            })
        }
    });

    // --></script>
            ]]></add>
        </operation>
       
    </file>
    <file name="catalog/controller/account/return.php">
        <operation>
            <search position="before"><![CDATA[if (isset($this->request->post['model'])) {]]></search>
            <add><![CDATA[           
 if (isset($this->request->post['product_id'])) {
            $data['product_id'] = $this->request->post['product_id'];
        } elseif (!empty($product_info)) {
            $data['product_id'] = $product_info['product_id'];
        } else {
            $data['product_id'] = '';
        }
            ]]></add>
        </operation>
    </file>
    <file name="catalog/model/account/return.php">
        <operation>
            <search position="replace"><![CDATA[$this->db->query("INSERT INTO `" . DB_PREFIX . "return` SET order_id = '" . (int) $data['order_id'] . "', customer_id = '" . (int) $this->customer->getId() . "', firstname = '" . $this->db->escape($data['firstname']) . "', lastname = '" . $this->db->escape($data['lastname']) . "', email = '" . $this->db->escape($data['email']) . "', telephone = '" . $this->db->escape($data['telephone']) . "', product = '" . $this->db->escape($data['product']) . "', model = '" . $this->db->escape($data['model']) . "', quantity = '" . (int) $data['quantity'] . "', opened = '" . (int) $data['opened'] . "', return_reason_id = '" . (int) $data['return_reason_id'] . "', return_status_id = '" . (int) $this->config->get('config_return_status_id') . "', comment = '" . $this->db->escape($data['comment']) . "', date_ordered = '" . $this->db->escape($data['date_ordered']) . "', date_added = NOW(), date_modified = NOW()");]]></search>
            <add><![CDATA[           
$this->db->query("INSERT INTO `" . DB_PREFIX . "return` SET order_id = '" . (int) $data['order_id'] . "', customer_id = '" . (int) $this->customer->getId() . "', firstname = '" . $this->db->escape($data['firstname']) . "', lastname = '" . $this->db->escape($data['lastname']) . "', email = '" . $this->db->escape($data['email']) . "', telephone = '" . $this->db->escape($data['telephone']) . "', product = '" . $this->db->escape($data['product']) . "',product_id = '" . $this->db->escape($data['product_id']) . "', model = '" . $this->db->escape($data['model']) . "', quantity = '" . (int) $data['quantity'] . "', opened = '" . (int) $data['opened'] . "', return_reason_id = '" . (int) $data['return_reason_id'] . "', return_status_id = '" . (int) $this->config->get('config_return_status_id') . "', comment = '" . $this->db->escape($data['comment']) . "', date_ordered = '" . $this->db->escape($data['date_ordered']) . "', date_added = NOW(), date_modified = NOW()");
]]></add>
        </operation>
        <operation>
            <search position="before"><![CDATA[public function getReturns($start = 0, $limit = 20) {]]></search>
            <add><![CDATA[           
 public function getReturnByProductId($order_id,$product_id) {
        $query = $this->db->query("SELECT r.return_id, r.order_id, r.firstname, r.lastname, r.email, r.telephone, r.product, r.model, r.quantity, r.opened, (SELECT rr.name FROM " . DB_PREFIX . "return_reason rr WHERE rr.return_reason_id = r.return_reason_id AND rr.language_id = '" . (int) $this->config->get('config_language_id') . "') AS reason, (SELECT ra.name FROM " . DB_PREFIX . "return_action ra WHERE ra.return_action_id = r.return_action_id AND ra.language_id = '" . (int) $this->config->get('config_language_id') . "') AS action, (SELECT rs.name FROM " . DB_PREFIX . "return_status rs WHERE rs.return_status_id = r.return_status_id AND rs.language_id = '" . (int) $this->config->get('config_language_id') . "') AS status, r.comment, r.date_ordered, r.date_added, r.date_modified FROM `" . DB_PREFIX . "return` r WHERE r.order_id = '" . (int) $order_id . "' AND r.product_id = '" . (int) $product_id . "' AND r.customer_id = '" . $this->customer->getId() . "'");

        return $query->row;
    }

]]></add>
        </operation>
        
    </file>
    <file name="catalog/view/theme/*/template/account/return_form.tpl">
        <operation>
            <search position="before"><![CDATA[ <input type="text" name="product" value="<?php echo $product; ?>" placeholder="<?php echo $entry_product; ?>" id="input-product" class="form-control" />]]></search>
            <add><![CDATA[           
<input type="hidden" name="product_id" value="<?php echo $product_id; ?>" id="input-product_id"/>
            ]]></add>
        </operation>
    </file>
   
    <!--EOF Catalog -->
    <!--BOF check pincode-->
    <file path="catalog/view/theme/*/template/" name="product/product.tpl" error="skip">
        <operation>
            <search position="before"><![CDATA[<?php echo $footer; ?>]]></search>
            <add><![CDATA[
                <style>
                .color-red{
color:red;                
}
                </style>
       <script type="text/javascript">
    var html = '<div class="form-group custom-field" id="pincode_content" style="border-bottom: 1px solid;display: -webkit-inline-box;">';
    html += '<i class="fa fa-map-marker fa-2x" style=""></i>';
    html += '<input type="text" id="dilivery_pincode" value="" placeholder="pincode"  class="form-control" autocomplete="off" style="width: 70%;border: none !important;border-width: unset !important;border-style: none !important;border-color: unset !important;background: none !important;border-radius: unset !important;height: auto;text-align: left;">';
    html += '<a id="check_delivery" style="cursor: pointer;text-decoration: underline;" onclick="checkpincode()">check</a>';
    html += '</div>';
    html += '<div class="form-group custom-field" id="pincode_msg">';
    html += '</div>';
    $(".grid-item-233-1-2-1").html(html);
    $(".grid-item-141-1-2-1").html(html);
                <?php if(isset($pincode)){
?>
      $("#dilivery_pincode").val('<?php echo $pincode ?>');
       $('#check_delivery').html('change');          <?php                
}?>
                var msg="<?php if(isset($pincode)){ echo $pin_check_result; if(isset($pin_check_delivery) && $pin_check_delivery != ''){echo $pin_check_delivery;}echo"</font></font><br /></div>";}?>";
               
 $('#pincode_msg').html(msg);
                if( $("#dilivery_pincode").val()==''){
                $('#pincode_msg').html('<span class="color-red">Please enter Pincode</span>');
                }
    function checkpincode() {
        var pincode = $("#dilivery_pincode").val();
                if(pincode==''){
               $('#pincode_msg').html('<span class="color-red">Please enter Pincode</span>');
                return false;
}
        $.ajax({
            url: 'index.php?route=product/product/pinCheck',
            type: 'post',
                       data:{ 
                pincode:pincode
            },
            beforeSend: function () {
                $('#check_delivery').html('checking');
            },
            complete: function () {
             $('#check_delivery').html('change');
            },
            success: function (json) {

                    $('#pincode_msg').html(json);
                
            }
        });
    }
</script>    
                
            ]]></add>
        </operation>
        
    </file>
   
    
    <file path="catalog/controller/product/product.php">
        <operation>
            <search><![CDATA[
            public function getRecurringDescription() {
            ]]></search>
            <add position="before"><![CDATA[
            public function pinCheck() {
        $this->load->model('catalog/pincode');
        $pin = array();
        if (isset($this->request->post['pincode'])) {
            $this->session->data['pin_check_status'] = "1";
            $pincode = addslashes($this->request->post['pincode']);
            $this->session->data['pincode'] = addslashes($this->request->post['pincode']);
            $pin = $this->model_catalog_pincode->getPin($pincode);
            $message_cod = $message_pre = $message_not = '';
            $message_cod = html_entity_decode("Prepaid & COD Available", ENT_QUOTES, 'UTF-8');
            $message_pre = html_entity_decode('Only Prepaid service is available.', ENT_QUOTES, 'UTF-8');
            $message_not = html_entity_decode("We cant deliver to this pincode. Can we send your order to a different address?", ENT_QUOTES, 'UTF-8');
            $text_color = '316E17';

            if (!isset($message_cod) || $message_cod == '') {
                $message_cod = "COD and Prepaid Service is Available At Your Location";
            }
            if (!isset($message_pre) || $message_pre == '') {
                $message_pre = "Only Prepaid Service is Available At Your Location";
            }
            if (!isset($message_not) || $message_not == '') {
                $message_not = "Service is not Available at your location yet";
            }

            if (isset($pin['id'])) {

                if ($pin['cod'] == 'Y' && $pin['prepaid'] = 'Y') {
                    echo "<p style='  height: 35px;'><b>Status :</b> <font color = '" . $text_color . "'>" . $message_cod . "</font></p>";
                    echo "<p style='  height: 35px;'><b>Expected Delivery :</b> <font color = '" . $text_color . "'>within 4-5 working days</font></p>";

                    $this->session->data['pin_check_result'] = "<p style='  height: 35px;'> <b>Status : </b> <font color = '" . $text_color . "'>" . $message_cod . "</font></p>";
                    $this->session->data['pin_check_delivery'] = "<p style='  height: 35px;'> <b> Expected Delivery :</b> <font color = '" . $text_color . "'>within 4-5 working days</font></p>";
                } else if ($pin['cod'] == 'N' && $pin['prepaid'] = 'Y') {
                    $text_color = 'red';
                    echo "<p style='  height: 35px;'><b>Status :</b> <font color = '" . $text_color . "'>" . $message_pre . "</font></p>";
                    echo "<p style='  height: 35px;'><b>Expected Delivery :</b> <font color = '" . $text_color . "'>within 4-5 working days</font></p>";
                    $this->session->data['pin_check_result'] = "<p style='  height: 35px;'> <b>Status : </b> <font color = '" . $text_color . "'>" . $message_pre . "</font></p>";
                    $this->session->data['pin_check_delivery'] = "<p style='  height: 35px;'> <b> Expected Delivery :</b> <font color = '" . $text_color . "'>within 4-5 working days</font></p>";
                } else {
                    $text_color = 'red';
                    echo "<p style='  height: 35px;'><b>Status </b></b><font color = '" . $text_color . "'>" . $message_not . "</font></p>";

                    $this->session->data['pin_check_result'] = "<p style='  height: 35px;'><b>Status </b></b> <font color = '" . $text_color . "'>" . $message_not . "</font></p>";
                    $this->session->data['pin_check_delivery'] = '';
                }
            } else {
                $text_color = 'red';
                echo "<p style='  height: 35px;'><b>Status  </b> <font color = '" . $text_color . "'>:" . $message_not . "</font></p>";

                $this->session->data['pin_check_result'] = "<p style='  height: 35px;'><b>Status </b></b><font color = '" . $text_color . "'>" . $message_not . "</font></p>";
                $this->session->data['pin_check_delivery'] = '';
            }
        }
    }
            ]]></add>
        </operation>
        <operation>
            <search><![CDATA[
            $this->load->model('catalog/category');
            ]]></search>
            <add position="before"><![CDATA[
            if (isset($this->session->data['pincode'])) {
            $data['pincode'] = $this->session->data['pincode'];
            $data['pin_check_result'] = $this->session->data['pin_check_result'];
            $data['pin_check_delivery'] = $this->session->data['pin_check_delivery'];
        }
            ]]></add>
        </operation>
    </file>
    <!--guest checkout-->
    <file path="catalog/controller/checkout/guest.php">
        <operation>
            <search><![CDATA[
            if ($this->request->post['country_id'] == '') {
            ]]></search>
            <add position="before"><![CDATA[
           //BOF Pincode
            $this->load->model('catalog/pincode');
            $pincode = $this->request->request['postcode'];
            $_SESSION['payment_pincode'] = $pincode;
            $pin = $this->model_catalog_pincode->getPin($pincode);
            if (isset($pin['id'])) {
                if ($pin['cod'] != 'Y' || $pin['prepaid'] != 'Y') {
                    $json['error']['postcode'] = "Service is not Available at your location yet";
                }
            } else {
                $json['error']['postcode'] = "Service is not Available at your location yet";
            }
            if (empty($pincode)) {
                $json['error']['postcode'] = "This field is required";
                //echo "<pre>"; print_r($this->session->data);
            }
//EOF Pincode 
            ]]></add>
        </operation>
       
    </file>
    <!--guest Shipping -->
    <file path="catalog/controller/checkout/guest_shipping.php">
        <operation>
            <search><![CDATA[
            if ($this->request->post['country_id'] == '') {
            ]]></search>
            <add position="before"><![CDATA[
          //BOF pincode
            $this->load->model('catalog/pincode');
            $pincode = $this->request->request['postcode'];
            $_SESSION['shipping_pincode'] = $pincode;
            $pin = $this->model_catalog_pincode->getPin($pincode);

            if (isset($pin['id'])) {
                if ($pin['cod'] != 'Y' || $pin['prepaid'] != 'Y') {
                    $json['error']['postcode'] = "Service is not Available at your location yet";
                }
            } else {
                $json['error']['postcode'] = "Service is not Available at your location yet";
            }
            if (empty($pincode)) {
                $json['error']['postcode'] = "This field is required";
                //echo "<pre>"; print_r($this->session->data);
            }
            if ($this->session->data['payment_address']['postcode'] != $_SESSION['shipping_pincode']) {
                $json['error']['postcode'] = "Delivery Address and Billing Address Pincode must be same";
            }
//EOF Pincode
            ]]></add>
        </operation>
       
    </file>
    <!--payment_address checkout-->
    <file path="catalog/controller/checkout/payment_address.php">
        <operation>
            <search><![CDATA[
            $data['addresses'] = $this->model_account_address->getAddresses();
            ]]></search>
            <add position="replace"><![CDATA[
        //BOF Pincode
        $data['addresses'] = array();
        $this->load->model('catalog/pincode');
        $address = $this->model_account_address->getAddresses();
        foreach ($address as $addres) {
            $pin = $this->model_catalog_pincode->getPin($addres['postcode']);
            if (isset($pin['id'])) {
                if ($pin['cod'] == 'Y' || $pin['prepaid'] == 'Y') {
                    $address_send[] = $addres;
                    $data['addresses'] = $address_send;
                }
            }
        }

//EOF Pincode 
            ]]></add>
        </operation>
        <operation>
            <search><![CDATA[
            if ($this->request->post['country_id'] == '') {
            ]]></search>
            <add position="before"><![CDATA[
       //BOF pincode
                $this->load->model('catalog/pincode');
                $pincode = $this->request->request['postcode'];
                $_SESSION['payment_pincode'] = $pincode;
                $pin = $this->model_catalog_pincode->getPin($pincode);
                if (!isset($pin['id'])) {
                    $json['error']['postcode'] = "Service is not Available at your location yet";
                }
                if (empty($pincode)) {
                    $json['error']['postcode'] = "This field is required";
                    //echo "<pre>"; print_r($this->session->data);
                }
//EOF pincode
            ]]></add>
        </operation>
       
    </file>
    <!--shipping_address checkout-->
    <file path="catalog/controller/checkout/shipping_address.php">
        <operation>
            <search><![CDATA[
            $data['addresses'] = $this->model_account_address->getAddresses();
            ]]></search>
            <add position="replace"><![CDATA[
       /BOF pincode
        $this->load->model('catalog/pincode');
        $data['addresses'] = array();
        $address = $this->model_account_address->getAddresses();
        foreach ($address as $addres) {
            $pin = $this->model_catalog_pincode->getPin($addres['postcode']);
            if (isset($pin['id'])) {
                if ($pin['cod'] == 'Y' || $pin['prepaid'] == 'Y') {
                    $address_send[] = $addres;
                    $data['addresses'] = $address_send;
                }
            }
        }
        //EOF pincode
            ]]></add>
        </operation>
        <operation>
            <search><![CDATA[
            if ($this->request->post['country_id'] == '') {
            ]]></search>
            <add position="before"><![CDATA[
      //    BOF Pincode
                $this->load->model('catalog/pincode');
                $pincode = $this->request->request['postcode'];
                $_SESSION['shipping_pincode'] = $pincode;
                $pin = $this->model_catalog_pincode->getPin($pincode);
                if (!isset($pin['id'])) {
                    $json['error']['postcode'] = "Service is not Available at your location yet";
                }
                if (empty($pincode)) {
                    $json['error']['postcode'] = "This field is required";
                }

                if ($this->session->data['payment_address']['postcode'] != $_SESSION['shipping_pincode']) {
                    $json['error']['postcode'] = "Delivery Address and Billing Address Pincode must be same";
                }

//    EOF Pincode 
            ]]></add>
        </operation>
       
    </file>
    <!--Register checkout-->
    <file path="catalog/controller/checkout/register.php">
       
        <operation>
            <search><![CDATA[
            if ($this->request->post['country_id'] == '') {
            ]]></search>
            <add position="before"><![CDATA[
    //BOF Pincode
            $this->load->model('catalog/pincode');
            $pincode = $this->request->request['postcode'];
            $_SESSION['payment_pincode'] = $pincode;
            $pin = $this->model_catalog_pincode->getPin($pincode);
            if (isset($pin['id'])) {
                if ($pin['cod'] != 'Y' || $pin['prepaid'] != 'Y') {
                    $json['error']['postcode'] = "Service is not Available at your location yet";
                }
            } else {
                $json['error']['postcode'] = "Service is not Available at your location yet";
            }
            if (empty($pincode)) {
                $json['error']['postcode'] = "This field is required";
                //echo "<pre>"; print_r($this->session->data);
            }
//EOF Pincode
            ]]></add>
        </operation>
       
    </file>
    <!--REST API check delivery-->
    <file path="catalog/controller/rest/account.php">
       
        <operation>
            <search><![CDATA[
            private function getRecurring($id) {
            ]]></search>
            <add position="before"><![CDATA[
        public function checkPincode() {
        $this->load->model('catalog/pincode');
        $pin = array();
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $post = $this->getPost();
            if (isset($post['pincode'])) {
                $this->session->data['pin_check_status'] = "1";
                $pincode = addslashes($post['pincode']);
                $pin = $this->model_catalog_pincode->getPin($pincode);
//                $message_cod = $message_pre = $message_not = '';
//                $message_cod = html_entity_decode("Prepaid & COD Available", ENT_QUOTES, 'UTF-8');
//                $message_pre = html_entity_decode('Only Prepaid service is available.', ENT_QUOTES, 'UTF-8');
//                $message_not = html_entity_decode("We cant deliver to this pincode. Can we send your order to a different address?", ENT_QUOTES, 'UTF-8');
                if (!isset($message_cod) || $message_cod == '') {
                    $message_cod = "COD and Prepaid Service is Available At Your Location";
                }
                if (!isset($message_pre) || $message_pre == '') {
                    $message_pre = "Only Prepaid Service is Available At Your Location";
                }
                if (!isset($message_not) || $message_not == '') {
                    $message_not = "Service is not Available at your location yet";
                }
                $delivery = "within 4-5 working days";
                if (isset($pin['id'])) {
                    if ($pin['cod'] == 'Y' && $pin['prepaid'] = 'Y') {
                        $this->json['data'] = ['message' => $message_cod, 'delivery' => $delivery];
                    } else if ($pin['cod'] == 'N' && $pin['prepaid'] = 'Y') {
                        $this->json['data'] = ['message' => $message_pre, 'delivery' => $delivery];
                    } else {
                        $this->json['error'][] = $message_not;
                        $this->statusCode = 404;
                    }
                } else {
                    $this->json['error'][] = $message_not;
                    $this->statusCode = 404;
                }
            } else {
                $this->json['error'][] = "Pincode paramer missing";
                $this->statusCode = 404;
            }
        } else {
            $this->statusCode = 405;
            $this->allowedHeaders = array("POST");
        }
        return $this->sendResponse();
    }
            ]]></add>
        </operation>
       
    </file>
    
   
    <!--THEME  checkout-->
    <file path="catalog/controller/journal3/checkout.php">
       
        <operation>
            <search><![CDATA[
            if ($this->journal3->settings->get('quickCheckoutAddressCountryField') === 'required') {
            ]]></search>
            <add position="before"><![CDATA[
 //    BOF Pincode
        $this->load->model('catalog/pincode');
        $pincode = trim(Arr::get($this->session->data, $type . '_address.postcode'));
        $_SESSION['shipping_pincode'] = $pincode;
        $pin = $this->model_catalog_pincode->getPin($pincode);
        if (!isset($pin['id'])) {
            $error[$type . '_postcode'] = "Service is not Available at your location yet";
        }
//    EOF Pincode 
            ]]></add>
        </operation>
       
    </file>
    <!--COD Payment Option-->
    <file path="catalog/model/extension/payment/cod.php">
       
        <operation>
            <search><![CDATA[
           $method_data = array();
            ]]></search>
            <add position="before"><![CDATA[
 // BOF Pincode
        $this->load->model('catalog/pincode');
        if (isset($this->session->data['shipping_address']['postcode'])) {
            $pincode = $this->session->data['shipping_address']['postcode'];
        } else {
            if (isset($this->session->data['pincode'])) {
                $pincode = (int) strip_tags($this->session->data['pincode']);
            }
        }

        $pin = $this->model_catalog_pincode->getPin($pincode);

        if (!isset($pin['id'])) {
            $status = false;
        } else if ($pin['cod'] != 'Y') {
            $status = false;
        }
// EOF Pincode
            ]]></add>
        </operation>
       
    </file>
    <!--Razorpay Payment Option-->
    <file path="catalog/model/extension/payment/cod.php">
       
        <operation>
            <search><![CDATA[
           $this->language->load('extension/payment/razorpay');
            ]]></search>
            <add position="before"><![CDATA[
 // BOF Pincode
      $pincode = NULL;
        $this->load->model('catalog/pincode');
        if (isset($this->session->data['shipping_address']['postcode'])) {
            $pincode = $this->session->data['shipping_address']['postcode'];
        } else {
            if (isset($this->session->data['pincode'])) {
                $pincode = $this->session->data['pincode'];
            }
        }

        $pin = $this->model_catalog_pincode->getPin($pincode);
                 if (!isset($pin['id'])) {
            $status = false;
        } else if ($pin['prepaid'] != 'Y') {
            $status = false;
        }
// EOF Pincode
            ]]></add>
        </operation>
        <operation>
            <search><![CDATA[
          $method_data = array(
            ]]></search>
            <add position="before"><![CDATA[
      $method_data = array();
        if ($status) {
                
            ]]></add>
        </operation>
        <operation>
            <search><![CDATA[
          return $method_data;
            ]]></search>
            <add position="before"><![CDATA[
   }               
            ]]></add>
        </operation>
       
    </file>
    <!--EOF check pincode-->
</modification>

